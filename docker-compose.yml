services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Lananh@123A
    ports:
      - "1433:1433"
    volumes:
      - mssqldata:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "bash -lc '</dev/tcp/localhost/1433' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  # productservice:
  #   container_name: productservice
  #   build:
  #     context: .
  #     dockerfile: backend/ProductService/Dockerfile   # ƒê∆∞·ªùng d·∫´n Dockerfile c·ªßa b·∫°n
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development            # ho·∫∑c Production n·∫øu mu·ªën
  #     - ConnectionStrings__Default=Server=sqlserver,1433;Database=ProductDB;User Id=sa;Password=Lananh@123A;TrustServerCertificate=True
  #   depends_on:
  #     sqlserver:
  #       condition: service_healthy
  #   ports:
  #     - "7007:8080"                                    # host:container
  #   restart: unless-stopped

  # frontend:
  #   container_name: frontend
  #   build:
  #     context: .
  #     dockerfile: frontend/Dockerfile
  #   depends_on:
  #     productservice:
  #       condition: service_started
  #   ports:
  #     - "3000:80"   # m·ªü FE ngo√†i host ·ªü c·ªïng 3000
  #   restart: unless-stopped
  
  
    # ===== ProductService (hot reload) =====
  productservice-dev:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    container_name: productservice-dev
    working_dir: /src/ProductService               # üëà ƒë·∫∑t ƒë√∫ng th∆∞ m·ª•c c√≥ .csproj
    volumes:
      - ./backend:/src                             # üëà mount g·ªëc backend v√†o /src
    command: >
      bash -lc "dotnet restore &&
              dotnet watch run --urls http://0.0.0.0:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__ProductDB=Server=sqlserver,1433;Database=ProductDB;User ID=sa;Password=Lananh@123A;TrustServerCertificate=True;Encrypt=False
    ports:
      - "7007:8080"
    depends_on:
      sqlserver:
        condition: service_started
  #===== Userservice (hot reload) =====
  userservice-dev:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    container_name: userservice-dev
    working_dir: /src/UserService
    volumes:
      - ./backend:/src            # folder ch·ª©a .csproj c·ªßa UserService
      - ./Shared:/src/Shared          # (n·∫øu d√πng project Shared)
    command: bash -lc "dotnet restore && dotnet watch run --urls http://0.0.0.0:8080"
    ports:
      - "7200:8080"                   # FE hay g·ªçi 7200 ‚Üí map ra host 7200
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__UserDB=Server=sqlserver,1433;Database=UserDB;User ID=sa;Password=Lananh@123A;TrustServerCertificate=True;Encrypt=False
    depends_on:
      - sqlserver
    # ===== Frontend DEV (hot reload CRA/Vite) =====
  frontend-dev:
    image: node:18-alpine
    container_name: frontend-dev
    working_dir: /app
    volumes:
      - ./frontend:/app                     # ƒë·∫£m b·∫£o ./frontend ch·ª©a package.json
      - node_modules_cache:/app/node_modules
    ports:
      - "3000:3000"
    environment:
      - HOST=0.0.0.0
      - PORT=3000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3000
      - BROWSER=none
      - CI=true
  # KH√îNG d√πng healthcheck trong dev l√∫c n√†y
    command: ["sh","-lc","[ -x node_modules/.bin/react-scripts ] || (npm ci || npm install); npm run start"]
    restart: unless-stopped

volumes:
    mssqldata:
    node_modules_cache: