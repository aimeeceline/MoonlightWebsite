import { memo, useEffect, useState } from "react";
import Breadcrumb from "../theme/breadcrumb";
import "./style.scss";
import { formatter } from "utils/fomatter";
import { Quantity } from "component";
import { AiOutlineClose } from "react-icons/ai";
import { useNavigate } from "react-router-dom";
import { ROUTERS } from "utils/router";
import axios from "axios";

const ShoppingCart = () => {

    const navigate = useNavigate();
    const [cartDetails, setCartDetails] = useState(null);
    const [discountCode, setDiscountCode] = useState("");
    const [message, setMessage] = useState("");
    const [loading, setLoading] = useState(false);
    // L·∫•y th√¥ng tin gi·ªè h√†ng
    useEffect(() => {
        const fetchCartDetails = async () => {
            const token = localStorage.getItem("token");
            if (!token) {
                setCartDetails(null); // Kh√¥ng c√≥ token, ƒë·∫∑t cartDetails l√† null
                return;
            }

            try {
                const response = await axios.get("https://localhost:7099/api/Cart/user-cartItem", {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });

                if (response.status === 200) {
                    setCartDetails(response.data); // Gi·∫£ s·ª≠ response.data ch·ª©a th√¥ng tin gi·ªè h√†ng
                } else {
                    setCartDetails(null); // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c gi·ªè h√†ng, ƒë·∫∑t l√† null
                    console.warn("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin gi·ªè h√†ng!");
                }
            } catch (error) {
                console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", error);
                setCartDetails(null); // X·ª≠ l√Ω l·ªói v√† ƒë·∫∑t cartDetails l√† null
            }
        };

        fetchCartDetails();
    }, []);
    // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    const handleRemoveFromCart = async (cartItemId) => {
        const token = localStorage.getItem("token");
        if (!token) {
            console.log("Kh√¥ng c√≥ token, y√™u c·∫ßu ƒëƒÉng nh·∫≠p.");
            alert('Vui l√≤ng ƒëƒÉng nh·∫≠p!');
            return;
        }
        console.log("Token t·ªìn t·∫°i:", token);

        try {
            console.log(`ƒêang g·ª≠i y√™u c·∫ßu x√≥a s·∫£n ph·∫©m c√≥ ID: ${cartItemId}`);
            const response = await axios.delete(`https://localhost:7099/api/Cart/delete-item/${cartItemId}`, {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });

            // Ki·ªÉm tra response.status v√† d·ªØ li·ªáu tr·∫£ v·ªÅ
            if (response.status === 200) {
                console.log("API tr·∫£ v·ªÅ th√†nh c√¥ng:", response.data);

                await fetchCartDetails();

                alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng.");
            } else {
                console.error("API tr·∫£ v·ªÅ status kh√¥ng ph·∫£i 200:", response.status);
                alert("Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!");
            }
        } catch (error) {
            // In ra l·ªói chi ti·∫øt khi kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu
            if (error.response) {
                // L·ªói c√≥ ph·∫£n h·ªìi t·ª´ server
                console.error("L·ªói t·ª´ server:", error.response);
                alert(`L·ªói t·ª´ server: ${error.response?.data?.message || "C√≥ l·ªói x·∫£y ra."}`);
            } else if (error.request) {
                // L·ªói khi g·ª≠i y√™u c·∫ßu
                console.error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server:", error.request);
                alert("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server. Vui l√≤ng th·ª≠ l·∫°i!");
            } else {
                // L·ªói kh√°c
                console.error("L·ªói kh√°c:", error.message);
                alert("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!");
            }
        }
    };
    // L·∫•y th√¥ng tin gi·ªè h√†ng
    const fetchCartDetails = async () => {
        const token = localStorage.getItem("token");
        if (!token) return;

        try {
            const response = await axios.get("https://localhost:7099/api/Cart/user-cartItem", {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });

            if (response.status === 200) {
                setCartDetails(response.data);
            }
        } catch (error) {
            console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", error);
        }
    };
    // √Åp m√£ gi·∫£m gi√° 
    const handleApplyDiscount = async () => {
        const token = localStorage.getItem("token");
        if (!token) {
            alert("Vui l√≤ng ƒëƒÉng nh·∫≠p!");
            return;
        }

        if (!discountCode) {
            alert("Vui l√≤ng nh·∫≠p m√£ gi·∫£m gi√°!");
            return;
        }

        setLoading(true);
        try {
            const response = await axios.post(
                "https://localhost:7099/api/Cart/apply-discount",
                { discountCode },
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                }
            );

            if (response.status === 200) {
                setMessage("√Åp m√£ gi·∫£m gi√° th√†nh c√¥ng!");

                // Sau khi √°p m√£, g·ªçi l·∫°i h√†m l·∫•y gi·ªè h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin
                await fetchCartDetails();
            } else if (response.status === 401) {
                // Gi·∫£ s·ª≠ m√£ l·ªói 404 khi m√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i
                setMessage("M√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i.");
            } else {
                setMessage("Kh√¥ng th·ªÉ √°p m√£ gi·∫£m gi√°.");
            }
        } catch (error) {
            console.error("L·ªói khi √°p m√£ gi·∫£m gi√°:", error);

            // Ki·ªÉm tra n·∫øu l·ªói l√† do m√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i
            if (error.response && error.response.status === 404) {
                setMessage("M√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i");
            } else if (error.response && error.response.status === 400) {
                // N·∫øu API tr·∫£ v·ªÅ l·ªói 400 (bad request), c√≥ th·ªÉ m√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá
                setMessage("M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá, Vui l√≤ng nh·∫≠p m√£ kh√°c!");
            } else {
                // Th√¥ng b√°o l·ªói chung n·∫øu c√≥ l·ªói kh√°c
                setMessage("H·ªá th·ªëng kh√¥ng cho ph√©p d√πng nhi·ªÅu m√£ gi·∫£m gi√° cho c√πng 1 ƒë∆°n h√†ng ƒë√¢u! üòú");
            }
        } finally {
            setLoading(false);
        }
    };

    // H·ªßy m√£ gi·∫£m gi√°
    const handleRemoveDiscount = async () => {
        const token = localStorage.getItem("token");
        if (!token) {
            alert("Vui l√≤ng ƒëƒÉng nh·∫≠p!");
            return;
        }

        setLoading(true);
        try {
            const response = await axios.delete(
                "https://localhost:7099/api/Cart/remove-discount",
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                }
            );

            if (response.status === 200) {
                await fetchCartDetails(); // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng
                setDiscountCode("");
                setMessage("M√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c h·ªßy.");
            }
        } catch (error) {
            console.error("L·ªói khi h·ªßy m√£ gi·∫£m gi√°:", error);
            setMessage("L·ªói khi h·ªßy m√£ gi·∫£m gi√°.");
        } finally {
            setLoading(false);
        }
    };

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
    const handleUpdateQuantity = async (cartItemId, newQuantity) => {
        const token = localStorage.getItem("token");
        if (!token) {
            alert("Vui l√≤ng ƒëƒÉng nh·∫≠p!");
            return;
        }

        try {
            const response = await axios.put(
                `https://localhost:7099/api/Cart/update-item-quantity/${cartItemId}`,
                { quantity: newQuantity },
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                }
            );

            if (response.status === 200) {
                // Thay v√¨ update th·ªß c√¥ng, g·ªçi l·∫°i API l·∫•y gi·ªè h√†ng m·ªõi
                await fetchCartDetails();
            } else {
                alert("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng kh√¥ng th√†nh c√¥ng.");
            }
        } catch (error) {
            console.error("L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
            alert("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng. Th·ª≠ l·∫°i sau nh√©!");
        }
    };

    return (
        <>
            <Breadcrumb name="Gi·ªè h√†ng" />
            <div className="container">
                <div className="table_cart">
                    <table>
                        <thead>
                            <tr>
                                <th>T√™n s·∫£n ph·∫©m</th>
                                <th>Gi√°</th>
                                <th>S·ªë l∆∞·ª£ng</th>
                                <th>Th√†nh ti·ªÅn</th>
                                <th />
                            </tr>
                        </thead>
                        <tbody>
                            {cartDetails?.items?.length ? (
                                cartDetails.items.map(item => {
                                    const PRODUCT_BASE = "https://localhost:7007";
                                    const img = item.productImage?.startsWith("http")
                                        ? item.productImage
                                        : item.productImage
                                            ? `${PRODUCT_BASE}/images/${item.productImage}`
                                            : "/images/placeholder.png"; // ·∫£nh d·ª± ph√≤ng


                                    return (
                                        <tr key={item.cartItemId}>
                                            <td className="shopping_cart_item">
                                                <img src={img} alt="product-pic" />
                                                <h4>{item.productName}</h4>
                                            </td>
                                            <td>{formatter(item.price || 0)}</td>
                                            <td>
                                                <Quantity
                                                    product={item}
                                                    initialQuantity={item.quantity}
                                                    hasAddToCart={false}
                                                    onQuantityChange={(newQty) => handleUpdateQuantity(item.cartItemId, newQty)}
                                                />
                                            </td>
                                            <td>{formatter(item.totalCost || 0)}</td>
                                            <td className="icon_close" onClick={() => handleRemoveFromCart(item.cartItemId)}>
                                                <AiOutlineClose />
                                            </td>
                                        </tr>
                                    );
                                })
                            ) : (
                                <tr><td colSpan="5" className="text-center">Gi·ªè h√†ng c·ªßa b·∫°n tr·ªëng</td></tr>
                            )}
                        </tbody>
                    </table>
                </div>
                <div className="row">
                    <div className="col-lg-6 col-md-12 col-sm-12 col-xs-12">
                        <div className="shopping_continue">
                            <h3>M√£ gi·∫£m gi√°</h3>
                            <div className="shopping_discount">
                                <input
                                    type="text"
                                    placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
                                    value={discountCode}
                                    onChange={(e) => setDiscountCode(e.target.value)}
                                    disabled={!!cartDetails?.discountCode} // Disable input n·∫øu ƒë√£ √°p d·ª•ng m√£ gi·∫£m gi√°
                                />

                                <button
                                    className="button-submit"
                                    onClick={handleApplyDiscount}
                                    disabled={loading || !!cartDetails?.discountCode} // Disable n·∫øu ƒëang t·∫£i ho·∫∑c ƒë√£ √°p m√£
                                >
                                    {loading ? "ƒêang √°p d·ª•ng..." : "√Åp d·ª•ng"}
                                </button>

                                {/* Hi·ªÉn th·ªã n√∫t "Hu·ª∑ m√£" n·∫øu c√≥ m√£ gi·∫£m gi√° */}
                                {cartDetails?.discount > 0 && (
                                    <>
                                        <button
                                            className="button-submit"
                                            style={{ marginLeft: "10px", backgroundColor: "#FF6347" }}
                                            onClick={handleRemoveDiscount}
                                            disabled={loading}
                                        >
                                            Hu·ª∑ m√£
                                        </button>
                                    </>
                                )}
                            </div>
                            {message && <p className="discount-message">{message}</p>}
                        </div>
                    </div>

                    <div className="col-lg-6 col-md-12 col-sm-12 col-xs-12">
                        <div className="shopping_checkout">
                            <h2>T·ªïng ƒë∆°n</h2>
                            <ul>
                                <li>S·ªë l∆∞·ª£ng: <span>{cartDetails?.quantity ?? 0}</span></li>
                                <li>T·ªïng ti·ªÅn: <span>{formatter(cartDetails?.originalTotal ?? 0)}</span></li>
                                <li>M√£ gi·∫£m gi√°: <span>{cartDetails?.discountCode ?? "Kh√¥ng c√≥"}</span></li>
                                <li>Ti·∫øt ki·ªám: <span>-{formatter(cartDetails?.discount ?? 0)}</span></li>
                                <li>Th√†nh ti·ªÅn: <span>{formatter(cartDetails?.totalCartPrice ?? 0)}</span></li>
                            </ul>
                            <button
                                type="submit"
                                className="button-submit"
                                onClick={() => navigate(ROUTERS.USER.CHECKOUT)}
                                disabled={!cartDetails?.items || cartDetails.items.length === 0}
                            >
                                Ti·∫øn h√†nh ƒë·∫∑t h√†ng
                            </button>
                        </div>
                    </div>
                </div>

            </div>
        </>
    );
};

export default memo(ShoppingCart);
